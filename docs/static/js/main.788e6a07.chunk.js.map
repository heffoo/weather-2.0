{"version":3,"sources":["views/components/loader/loader.js","components/searchIcon.tsx","views/components/searchForm/searchForm.js","components/errorBoundary.js","utils.ts","views/components/mainInfo/MainInfo.tsx","views/components/weatherList/weather-item/weatherDate.js","views/components/weatherList/weather-item/weatherHours.js","views/components/weatherList/weather-item/weatherPicture.js","views/components/weatherList/weather-item/weatherTemp.js","views/components/weatherList/weather-item/weatherItem.tsx","views/components/weatherList/WeatherList.tsx","views/components/weatherList/WeatherListBlock.tsx","views/components/detailedInfo/DetailedInfo.tsx","views/appContainer.js","services/weatherService.js","consts.ts","components/modal.tsx","components/mainComponent.js","index.tsx"],"names":["override","css","Loader","className","size","color","SearchIcon","width","height","viewBox","fill","d","SearchForm","onSubmitCity","weatherInfo","name","onSubmit","type","id","dayInfo","city","ErrorBoundary","props","state","error","errorInfo","this","setState","console","log","children","React","Component","formatDate","time","Date","toLocaleString","month","day","MainInfo","mainClouds","Math","ceil","temperature","feelsLike","clouds","description","alt","src","icon","WeatherDate","WeatherHours","WeatherPicture","WeatherTemp","temp","WeatherItem","date","iconName","WeatherList","list","length","map","index","key","WeatherListBlock","dailyInfo","hourlyInfo","setModalIsOpen","exact","to","activeClassName","path","from","DetailedInfo","lon","lat","windSpeed","AppContainer","loading","esc","encodeURIComponent","APPID","WeatherService","whichCity","params","q","units","lang","Object","keys","k","join","options","fetch","resp","status","ok","json","query","buildParams","getForecast","dayResponse","weather","main","coord","feels_like","wind","speed","hourlyResponse","el","dt","hour","minute","params3","exclude","query3","dailyResponse","daily","getDayByCity","getHourlyByCity","getDailyByCoords","Modal","isOpen","setIsOpen","onClick","initState","Container","useState","desiredCity","setDesiredCity","setLoading","setAllWeather","isModalOpen","isError","setError","useEffect","a","getAll","currentCityWeather","alert","e","preventDefault","form","document","forms","searchCity","elements","cityInput","value","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.788e6a07.chunk.js","sourcesContent":["import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport SyncLoader from \"react-spinners/SyncLoader\";\n\nimport \"./loader.scss\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nexport function Loader() {\n  return (\n    <div className=\"sweet-loading-show\">\n      <SyncLoader css={override} size={10} color={\"#ffffff\"} />\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst SearchIcon = () => {\n  return (\n    <svg width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\">\n      <path\n        fill=\"#888888\"\n        d=\"M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5A6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5S14 7.01 14 9.5S11.99 14 9.5 14z\"\n      ></path>\n    </svg>\n  );\n};\n\nexport default SearchIcon;\n","import React from \"react\";\nimport SearchIcon from \"../../../components/searchIcon\";\nimport \"./searchForm.scss\";\n\nexport function SearchForm({ onSubmitCity, weatherInfo }) {\n  return (\n    <div className=\"searchFormWrapper\">\n      <form name=\"searchCity\" onSubmit={onSubmitCity}>\n        <input\n          name=\"cityInput\"\n          type=\"text\"\n          className=\"searchFormInput\"\n          id=\"input\"\n        />\n        <button type=\"submit\" className=\"searchFormButton\">\n          <SearchIcon />\n        </button>\n      </form>\n      <p>город: {weatherInfo.dayInfo.city}</p>\n    </div>\n  );\n}\n","import React from \"react\";\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error: error,\n      errorInfo: errorInfo,\n    });\n    // You can also log error messages to an error reporting service here\n    \n  }\n  \n  render() {\n    if (!this.state.errorInfo) {\n      \n      return this.props.children;\n    }\n    // Error pat\nconsole.log(this.state.error)\n\n    return (\n      <div>\n        <h2>404</h2>\n      </div>\n    );\n    // Normally, just render children\n  }\n}\nexport default ErrorBoundary;\n","export function formatDate(time: number) {\n  return new Date(time * 1000).toLocaleString(\"ru\", {\n    month: \"long\",\n    day: \"numeric\",\n  });\n}\nexport function formatTime(time: number) {\n  return new Date(time * 1000).toLocaleString(\"ru\", {\n    hour: \"numeric\",\n    minute: \"numeric\",\n  });\n}\n\nexport function translateClouds(mainClouds: string) {\n  let clouds;\n  if (mainClouds === \"Clouds\") {\n    clouds = \"Облачно\";\n  } else if (mainClouds === \"Rain\") {\n    clouds = \"Дождь\";\n  } else if (mainClouds === \"Clear\") {\n    clouds = \"Солнечно\";\n  } else if (mainClouds === \"Smoke\") {\n    clouds = \"Дымка\";\n  } else if (mainClouds === \"Mist\") {\n    clouds = \"Туман\";\n  } else if (mainClouds === \"Drizzle\") {\n    clouds = \"Морось\";\n  } else if (mainClouds === \"Snow\") {\n    clouds = \"Снег\";\n  } else {\n    clouds = mainClouds;\n  }\n  return clouds;\n}\n","import React from \"react\";\nimport { CurrentDayInfo } from \"../../../types/currentDay\";\nimport { translateClouds } from \"../../../utils\";\nimport \"./mainInfo.scss\";\n\ntype MainInfoProps = {\n  dayInfo: CurrentDayInfo;\n};\n\nconst MainInfo = ({ dayInfo }: MainInfoProps) => {\n  return (\n    <div className=\"main-info\">\n      <div>\n        <p className=\"temp\"> {Math.ceil(dayInfo.temperature)}°</p>\n        <p>По ощущениям: {Math.ceil(dayInfo.feelsLike)} °</p>\n      </div>\n      <br />\n      <br />\n      <div className=\"clouds\">\n        <h1> {translateClouds(dayInfo.clouds)}</h1>\n        <p> {dayInfo.description} </p>\n      </div>\n      <br />\n      <img\n        className=\"weather-img\"\n        alt=\"\"\n        src={`http://openweathermap.org/img/wn/${dayInfo.icon}@2x.png`}\n      />\n\n    </div>\n  );\n};\n\nexport default MainInfo;\n","import React from \"react\";\nimport \"./weatherItem.scss\";\n\nexport default function WeatherDate({ time }) {\n  return <>{time}</>;\n}\n","import React from \"react\";\nimport \"./weatherItem.scss\";\n\nexport default function WeatherHours({ time }) {\n  return (\n    <>\n      {time}\n    </>\n  );\n}\n","import React from \"react\";\nimport \"./weatherItem.scss\";\n\nexport default function WeatherPicture({ icon }) {\n  return (\n    <div className=\"weather-pic\">\n      <img alt=\"\" className=\"weather-block-img\" src={`http://openweathermap.org/img/wn/${icon}@2x.png`} />\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport \"./weatherItem.scss\";\n\nexport default function WeatherTemp({ temp }) {\n  return <>{Math.ceil(temp)}°</>;\n}\n","import React from \"react\";\n\nimport WeatherDate from \"./weatherDate.js\";\nimport WeatherHours from \"./weatherHours.js\";\nimport WeatherPicture from \"./weatherPicture.js\";\nimport WeatherTemp from \"./weatherTemp.js\";\n\nimport \"./weatherItem.scss\";\n\ntype WeatherListItemProps = {\n  date: string;\n  temperature: number;\n  time?: string;\n  iconName: string; \n}\n\nexport default function WeatherItem({ date, temperature, time, iconName }: WeatherListItemProps) {\n  return (\n    <div className=\"day-block\">\n      <div>\n        <div className=\"time\">\n          <p>\n            <WeatherDate time={date} />\n          </p>\n\n          <p className=\"temperature\">\n            <WeatherTemp temp={temperature} />\n          </p>\n        </div>\n      </div>\n      {time && <WeatherHours time={time} />}\n\n      <WeatherPicture icon={iconName} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { weatherDailyInfo } from \"../../../types/weatherDailyInfo\";\nimport { WeatherHourlyInfo } from \"../../../types/weatherHourlyInfo\";\nimport WeatherItem from \"./weather-item/weatherItem\";\n\nimport \"./weatherList.scss\";\n\ntype WeatherListProps = {\n  list: weatherDailyInfo[] | WeatherHourlyInfo[];\n};\n\nconst WeatherList = ({ list = [] }: WeatherListProps) => {\n  return (\n    <section className=\"different-days-block\">\n      <div className=\"block-scroll-wrapper\">\n        <div className=\"block-scroll\">\n          <>\n            {list.length &&\n              list.map((day, index) => (\n                <WeatherItem\n                  key={index}\n                  time={\"time\" in day ? day.time : \"\"}\n                  iconName={day.iconName}\n                  date={day.date}\n                  temperature={day.temperature}\n                />\n              ))}\n            {console.log(\"here\")}\n          </>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default WeatherList;\n","import React from \"react\";\nimport { NavLink, Switch, Route, Redirect } from \"react-router-dom\";\nimport ErrorBoundary from \"../../../components/errorBoundary\";\nimport { weatherDailyInfo } from \"../../../types/weatherDailyInfo\";\nimport { WeatherHourlyInfo } from \"../../../types/weatherHourlyInfo\";\nimport WeatherList from \"./WeatherList\";\n\ntype WeatherListBlockProps = {\n  dailyInfo: weatherDailyInfo[];\n  hourlyInfo: WeatherHourlyInfo[];\n  setModalIsOpen: (modalIsOpen: boolean) => void;\n};\n\nconst WeatherListBlock = ({\n  dailyInfo,\n  hourlyInfo,\n  setModalIsOpen,\n}: WeatherListBlockProps) => {\n  return (\n    <div>\n      <div className=\"btn-wrapper\">\n        <NavLink\n          exact\n          to=\"/weather\"\n          activeClassName=\"active\"\n          className=\"day-btn\"\n        >\n          по дням\n        </NavLink>\n        <NavLink to=\"/old\" activeClassName=\"active\" className=\"day-btn\">\n          по часам\n        </NavLink>\n      </div>\n      <Switch>\n        <ErrorBoundary>\n          <Route exact path=\"/weather\">\n            <WeatherList list={dailyInfo} />\n          </Route>\n          {console.log(dailyInfo, hourlyInfo)}\n\n          <Route path=\"/old\">\n            <WeatherList list={hourlyInfo} />\n          </Route>\n          <Redirect from=\"/\" to=\"/weather\" />\n        </ErrorBoundary>\n      </Switch>\n    </div>\n  );\n};\n\nexport default WeatherListBlock;\n","import React from \"react\";\nimport { CurrentDayInfo } from \"../../../types/currentDay\";\n\ntype DetailedInfoProps = {\n  dayInfo: CurrentDayInfo;\n};\n\nconst DetailedInfo = ({ dayInfo }: DetailedInfoProps) => {\n  return (\n    <div className=\"coords\">\n      широта {dayInfo.lon} <br />\n      долгота {dayInfo.lat}\n      <br />\n      ветер {dayInfo.windSpeed}мс/c\n      <br />\n    </div>\n  );\n};\n\nexport default DetailedInfo;\n","import React from \"react\";\n\nimport { SearchForm } from \"./components/searchForm/searchForm\";\nimport ErrorBoundary from \"../components/errorBoundary\";\nimport \"./appContainer.scss\";\nimport MainInfo from \"./components/mainInfo/MainInfo\";\nimport WeatherListBlock from \"./components/weatherList/WeatherListBlock\";\nimport DetailedInfo from \"./components/detailedInfo/DetailedInfo\";\n\nexport function AppContainer({ //пропсы\n  weatherInfo,\n  onSubmitCity,\n  loading,\n  setModalIsOpen,\n}) {\n  if (!weatherInfo.dayInfo) { //открывать модальное окно ошибки,\n    setModalIsOpen(true);     //если нет данных о текущей погоде\n  }\n\n  return (\n    <div className=\"wrapper\"> {/* обертка компонентов */}\n      <SearchForm \n        onSubmitCity={onSubmitCity}\n        loading={loading}\n        weatherInfo={weatherInfo}\n      /> {/* форма поиска */}\n      <MainInfo dayInfo={weatherInfo.dayInfo} /> {/* главная информация */}\n      <div className=\"bottomBlock\"> {/* обертка нижней части */}\n        <DetailedInfo dayInfo={weatherInfo.dayInfo} /> {/* детальная информация слева снизу */}\n        <WeatherListBlock\n          dailyInfo={weatherInfo.dailyInfo}\n          hourlyInfo={weatherInfo.hourlyInfo}\n          setModalIsOpen={setModalIsOpen}\n        /> {/* список по дням и по часам справа снизу */}\n      </div>\n    </div>\n  );\n}\n","import { apiUrl, apiUrlSecond, apiUrlThird } from \"../consts\";\nimport { formatDate, formatTime } from \"../utils\";\n\nconst esc = encodeURIComponent;\nconst APPID = \"5f892c8a0b4c47ee1b455fa5bbc9851f\";\n\nexport default class WeatherService {\n  static buildParams(whichCity) {\n    let params = { APPID, q: `${whichCity}`, units: \"metric\", lang: \"ru\" };\n    let query =\n      \"?\" +\n      Object.keys(params)\n        .map((k) => esc(k) + \"=\" + esc(params[k]))\n        .join(\"&\");\n    return query;\n  }\n\n  static async getForecast(options) {\n    const resp = await fetch(options);\n\n    if (resp.status === 404) {\n      console.log(\"incorrect city\");\n      return resp;\n    } else if (!resp.ok) {\n      console.log(\"unknown error\");\n    }\n\n    const WeatherList = await resp.json();\n    return WeatherList;\n  }\n\n  static async getDayByCity(whichCity) {\n    const query = WeatherService.buildParams(whichCity);\n\n    const dayResponse = await WeatherService.getForecast(`${apiUrl}${query}`);\n    if (dayResponse.ok === false) {\n      return dayResponse;\n    }\n    const dayInfo = {\n      city: dayResponse.name,\n      clouds: dayResponse.weather[0].main,\n      lat: dayResponse.coord.lat,\n      lon: dayResponse.coord.lon,\n      \n      temperature: dayResponse.main.temp,\n      feelsLike: dayResponse.main.feels_like,\n      windSpeed: dayResponse.wind.speed,\n      description: dayResponse.weather[0].description,\n      icon: dayResponse.weather[0].icon,\n    };\n\n    return dayInfo;\n  }\n\n  static async getHourlyByCity(whichCity) {\n    const query = WeatherService.buildParams(whichCity);\n    const hourlyResponse = await WeatherService.getForecast(`${apiUrlSecond}${query}`);\n\n    const hourlyInfo = hourlyResponse.list.map((el) => {\n      return {\n        iconName: el.weather[0].icon,\n        temperature: el.main.temp,\n        date: formatDate(el.dt),\n        time: formatTime(el.dt),\n      };\n    });\n\n    return hourlyInfo;\n  }\n\n  static async getDailyByCoords(lat, lon) {\n    let params3 = { APPID, lat, lon, units: \"metric\", exclude: \"hourly\" };\n    let query3 =\n      \"?\" +\n      Object.keys(params3)\n        .map((k) => esc(k) + \"=\" + esc(params3[k]))\n        .join(\"&\");\n\n    const dailyResponse = await WeatherService.getForecast(`${apiUrlThird}${query3}`);\n    const dailyInfo = dailyResponse.daily.map((el) => {\n      return {\n        iconName: el.weather[0].icon,\n        temperature: el.temp.day,\n        date: formatDate(el.dt),\n      };\n    });\n    \n    return dailyInfo;\n  }\n\n  static async getAll(whichCity) {\n    const dayInfo = await WeatherService.getDayByCity(whichCity);\n    if (dayInfo.ok === false) {\n      return dayInfo;\n    }\n    const hourlyInfo = await WeatherService.getHourlyByCity(whichCity);\n\n    const dailyInfo = await WeatherService.getDailyByCoords(dayInfo.lat, dayInfo.lon);\n\n    return {\n      dayInfo,\n      hourlyInfo,\n      dailyInfo,\n    };\n  }\n}\n","\nexport const apiUrl = \"https://api.openweathermap.org/data/2.5/weather\";\nexport const apiUrlSecond = \"https://api.openweathermap.org/data/2.5/forecast\";\nexport const apiUrlThird = \"https://api.openweathermap.org/data/2.5/onecall\";\nexport const defaultCity = \"Краснодар\";\n\n","import React from \"react\";\n\nimport \"./modal.scss\";\n\ntype ModalProps = {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  error: number;\n};\n\nexport function Modal({ isOpen, setIsOpen, error }: ModalProps) {\n  if (isOpen) {\n    return (\n      <div className=\"modal\">\n        <p className=\"errorMessage\">\n          {error === 404 ? \"Ошибка 404: Город не найден\" : \"Неизвестная ошибка\"}\n        </p>\n        <button className=\"exit-modal-button\" onClick={() => setIsOpen(false)}>\n          ×\n        </button>\n        {/* <div className=\"modal-container\">\n          {error === 404 ? \"Ошибка 404: Город не найден\" : \"Неизвестная ошибка\"}\n          <button className=\"exit-modal-button\" onClick={() => setIsOpen(false)}>\n            ×\n          </button>\n        </div> */}\n      </div>\n    );\n  }\n  return \"\";\n}\n","import React, { useEffect, useState } from \"react\";\nimport { defaultCity } from \"../consts\";\nimport { Loader } from \"../views/components/loader/loader\";\nimport { AppContainer } from \"../views/appContainer\";\nimport WeatherService from \"../services/weatherService\";\n\nimport \"./mainComponent.scss\";\nimport { Modal } from \"./modal\";\n\nconst initState = { dayInfo: {}, hourlyInfo: {}, dailyInfo: {} };\n\nconst Container = () => {\n  const [desiredCity, setDesiredCity] = useState(defaultCity);\n  const [loading, setLoading] = useState(true);\n  const [weatherInfo, setAllWeather] = useState(initState);\n  const [isModalOpen, setModalIsOpen] = useState(false);\n  const [isError, setError] = useState();\n\n  const onSubmitCity = (e) => {\n    e.preventDefault();\n    const form = document.forms.searchCity;\n    setDesiredCity(form.elements.cityInput.value);\n    setLoading(true);\n    form.elements.cityInput.value = \"\";\n  };\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const currentCityWeather = await WeatherService.getAll(desiredCity);\n        if (currentCityWeather.ok === false) {\n          setError(currentCityWeather.status);\n          setModalIsOpen(true);\n        } else {\n          setLoading(true);\n          setAllWeather(currentCityWeather);\n        }\n      } catch (e) {\n        alert(\"Проверьте подключение к интернету\");\n      }\n\n      setLoading(false);\n    })()\n  }, [desiredCity]);\n\n  return (\n    <div className=\"main-container\">\n      {(loading && <Loader />) || (\n        <>\n          <AppContainer\n            isModalOpen={isModalOpen}\n            setModalIsOpen={setModalIsOpen}\n            weatherInfo={weatherInfo}\n            loading={loading}\n            onSubmitCity={onSubmitCity}\n          />\n\n          <Modal error={isError} isOpen={isModalOpen} setIsOpen={setModalIsOpen} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Container;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Container from \"./components/mainComponent\";\n\nReactDOM.render(\n  <Router>\n    <Container />\n  </Router>,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}